/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    // if (zx == 1) sets x = 0
    Mux16 (a = x, b = false, sel = zx, out = outzx);
    
    // if (nx == 1) sets x = !x
    Not16 (in = outzx, out = notx);
    Mux16 (a = outzx, b = notx, sel = nx, out = outnx);
    
    // if (zy == 1) sets y = 0
    Mux16 (a = y, b = false, sel = zy, out = outzy);
    
    // if (ny == 1) sets y = !y
    Not16 (in = outzy, out = noty);
    Mux16 (a = outzy, b = noty, sel = ny, out = outny);
    
    // if (f == 1)  sets out = x + y
    Add16 (a = outnx, b = outny, out = xAddy);
    And16 (a = outnx, b = outny, out = xAndy);
    Mux16 (a = xAndy, b = xAddy, sel = f, out = outf);
    
    // if (no == 1) sets out = !out
    Not16 (in = outf, out = notout);
    Mux16 (a = outf, b = notout, sel = no, out = out, out = out0);
    And16 (a = out0, b = true, out[0..7] = outPart1, out[8..15] = outPart2, out[15] = flag);
    
    // if (out = 0) sets zr = True
    Or8Way (in = outPart1, out = sel01);
    Or8Way (in = outPart2, out = sel02);
    Or (a = sel01, b = sel02, out = sel0);
    Mux (a = true, b = false, sel = sel0, out = zr);
    
    // if (out < 0) sets ng = True
    Mux (a = false, b = true, sel = flag, out = ng);
}